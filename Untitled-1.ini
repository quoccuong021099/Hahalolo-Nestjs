OOP: Object Oriented Programing
Gồm có 4 tính chất: 
    - Abstraction: Trừu tượng:  Tạo ra các lớp trừu tượng mô hình hoá các đối tượng trong thế giới thực.
    - Tính đóng gói (Encapsulation): Các thực thể của lớp trừu tượng có các giá trị thuộc tính riêng biệt.
        - Thích chia sẻ data cho chỗ khác sử dụng thì dùng public còn k thì dùng private 
    - Tính kế thừa (Inheritance): Các đối tượng có thể dễ dàng kế thừa và mở rộng lẫn nhau.
        - 
    - Tính đa hình (Polymorphism): Có thể thực hiện một hành động đơn theo nhiều cách thức khác nhau tuỳ theo loại đối tượng cụ thể đang được gọi.
Dependency Inversion: Là nguyên lý cuối cùng trong SOLID

S - Single responsibility priciple (SRP)
    + Mỗi lớp chỉ nên chịu trách nhiệm về một nhiệm vụ cụ thể nào đó.
O - Open/Closed principle (OCP)
    + Không được sửa đổi một Class có sẵn, nhưng có thể mở rộng bằng kế thừa.
    - Nếu edit thẳng vào class cũ thì nó ảnh hưởng nhiều đến những nơi khác đã sử dụng class cũ này
L - Liskov substitution principe (LSP)
    + Các đối tượng (instance) kiểu class con có thể thay thế các đối tượng kiểu class cha mà không gây ra lỗi.
    - VD: 
    - class Duck {} -> class BlackDuck extent Duck -> class CaosuDuck extent Duck {=> nó sai }
I - Interface segregation principle (ISP)
    + Thay vì dùng 1 interface lớn, ta nên tách thành nhiều interface nhỏ, với nhiều mục đích cụ thể.
D - Dependency inversion principle (DIP)
    1.Các module cấp cao không nên phụ thuộc vào các modules cấp thấp. Cả 2 nên phụ thuộc vào abstraction.
    2.Interface (abstraction) không nên phụ thuộc vào chi tiết, mà ngược lại (Các class giao tiếp với nhau thông qua interface (abstraction), không phải thông qua implementation.)

